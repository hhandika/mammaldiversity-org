---
import { splitCountryDistribution, countryListToJson } from "../../scripts/map";
import cntl from "cntl";

const { countries, extendClass } = Astro.props;

const countryList = splitCountryDistribution(countries ?? "");
const countryListStringify = countryListToJson(countryList);

const mapContainerClasses = cntl`
  bg-spectra-100 
  dark:bg-spectra-900 
  rounded-xl 
  p-4 
  my-2
  ${extendClass}
`;
---

<div class={mapContainerClasses}>
  <h3 class="text-lg md:text-xl font-semibold">Country distribution map</h3>
  <h4 class="text-sm text-spectra-900 dark:text-spectra-400 mb-4">
    The map below provides a general overview. Most species inhabit only
    specific regions within countries. Hover over the highlighted regions to see
    the country name.
  </h4>
  <distribution-map data-countries={countryListStringify}>
    <div id="map" class="justify-items-center max-w-full">
    </div></distribution-map
  >
</div>

<script
  is:inline
  async
  type="text/javascript"
  src="https://www.gstatic.com/charts/loader.js"></script>
<script>
  // Declare google as a global variable
  declare const google: any;
  import { jsonToCountryList } from "../../scripts/map";

  class DistributionMap extends HTMLElement {
    lastWidth: number = 0;

    connectedCallback() {
      // Read the message from the data attribute.
      const countryDistribution = this.dataset.countries;
      const countries = jsonToCountryList(countryDistribution ?? "");

      google.charts.load("current", {
        packages: ["geochart"],
      });
      google.charts.setOnLoadCallback(drawRegionsMap);

      async function drawRegionsMap() {
        var data = await google.visualization.arrayToDataTable([
          /**
           * Represents the distribution data for countries.
           * The first element is the country name.
           * The second element indicates known distribution: 1 for yes, 0 for no.
           */
          ["Country", "Known distribution (1: yes, 0: no)?"],
          ...countries.known.map((country) => [country, 1]),
          ...countries.potential.map((country) => [country, 0]),
        ]);

        var options = {
          displayMode: "Regions",
          colorAxis: { colors: ["#FFEB00", "#117554"] },
          legend: "none",
        };

        var chart = new google.visualization.GeoChart(
          document.getElementById("map")
        );

        await chart.draw(data, options);
      }

      // Refresh map when window is resized
      // So, the map can be redrawn to fit the new window size
      window.addEventListener("resize", async () => {
        if (window.innerWidth !== this.lastWidth) {
          this.lastWidth = window.innerWidth;
          await drawRegionsMap();
        }
      });
    }
  }

  customElements.define("distribution-map", DistributionMap);
</script>

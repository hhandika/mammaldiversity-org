---
import { db, Taxonomy } from "astro:db";
import Layout from "../../layouts/Layout.astro";
import MainPage from "../../layouts/MainPage.astro";
import { eq } from "astro:db";
import Section from "../../components/Section.astro";
import { Synonym } from "astro:db";
import cntl from "cntl";
import SynonymButton from "../../components/buttons/SynonymButton.astro";
import SynonymList from "../../layouts/SynonymList.astro";
import TaxonData from "../../components/TaxonData.astro";
import { matchIUCNRedlistStatus } from "../../scripts/iucn";

// This page is statically generated at build time
// We use getStaticPaths to tell Astro to generate this page for each taxon in the database
// This approach allow us make sure the generated page is always up to date with the database
// It also ensure that the links to the taxon pages are always available
export const getStaticPaths = async () => {
  const taxonIDs = await db.select({ id: Taxonomy.id }).from(Taxonomy);
  return taxonIDs.map((t: { id: number }) => ({ params: { id: t.id } }));
};

const { id } = Astro.params;

const taxon = await db.select().from(Taxonomy).where(eq(Taxonomy.id, id)).get();
const synonyms = await db
  .select()
  .from(Synonym)
  .where(eq(Synonym.speciesId, id));

const authority = `${taxon?.authoritySpeciesAuthor}, ${taxon?.authoritySpeciesYear}`;

const iucnStatus = matchIUCNRedlistStatus(taxon?.iucnStatus ?? "NE");

const mddSpeciesPermanentLink = "https://www.mammaldiversity.org/taxon/";
const mddSpeciesLink = `${mddSpeciesPermanentLink}${taxon?.id}`;

const common_name_class = cntl`
  text-xl 
  md:text-2xl
  text-spicy-mix-800 
  dark:text-spicy-mix-200
`;
---

<Layout title="Taxon">
  <MainPage>
    <div class="text-center item-center mt-8 md:mt-16 mb-4">
      <h1 class="font-serif text-3xl md:text-5xl italic mb-2">
        {taxon?.genus}{` ${taxon?.specificEpithet}`}
      </h1>
      <h2 class="text-xl md:text-2xl">
        {taxon?.authorityParentheses === 1 ? `(${authority})` : authority}
      </h2>
      <h2 class={common_name_class}>
        {taxon?.mainCommonName}
      </h2>
    </div>
    <div class="flex-grow border-t border-gray-400"></div>
    <Section title="Taxonomy">
      <p>Subclass: {taxon?.subclass}</p>
      <p>Infraclass: {taxon?.infraclass}</p>
      <p>Order: {taxon?.taxonOrder}</p>
      <p>Family: {taxon?.family}</p>
      <p>Genus: <span class="italic">{taxon?.genus} </span></p>
    </Section>
    <TaxonData
      label="Authority citation"
      content={taxon?.authoritySpeciesCitation}
    />
    <TaxonData
      label="Authority publication link"
      content={taxon?.authoritySpeciesLink}
      isUrl
    />
    <TaxonData
      label="Original name as described"
      content={taxon?.originalNameCombination}
      isItalic
    />
    <TaxonData label="Other common names" content={taxon?.otherCommonNames} />
    <TaxonData label="Type material" content={taxon?.typeVoucher} />
    <TaxonData label="Type kind" content={taxon?.typeKind} />
    <TaxonData
      label="Type specimen URI"
      content={taxon?.typeVoucherURIs}
      isUrl
    />
    <TaxonData label="Type locality" content={taxon?.typeLocality} />
    <TaxonData
      label="Country distribution"
      content={taxon?.countryDistribution}
    />
    <TaxonData label="Distribution notes" content={taxon?.distributionNotes} />
    <TaxonData
      label="Distribution references"
      content={taxon?.distributionNotesCitation}
    />
    <TaxonData label="Taxonomy notes" content={taxon?.taxonomyNotes} />
    <TaxonData
      label="Taxonomy notes citation"
      content={taxon?.taxonomyNotesCitation}
    />
    <TaxonData label="IUCN Red List status" content={iucnStatus} />
    <TaxonData label="Species Permalink" content={mddSpeciesLink} isUrl />
    <Section title="Map">
      <leaflet-map data-message={taxon?.countryDistribution}>
        <div id="map"></div></leaflet-map
      >
    </Section>
    <Section title="Synonyms">
      <SynonymList>
        {
          synonyms.map((s) => (
            <SynonymButton
              rootName={s.rootName}
              originalNameCombination={s.originalCombination}
              species={s.species}
              authoritySpeciesAuthor={s.author}
              authoritySpeciesYear={s.year}
              authorityParentheses={s.authorityParentheses}
            />
          ))
        }
      </SynonymList>
    </Section>
  </MainPage>
</Layout>

<!-- <script>
  import { drawCountriesOnMap } from "../../scripts/map";
  class LeafletMap extends HTMLElement {
    connectedCallback() {
      const countryDistribution = this.dataset.message || "";
      drawCountriesOnMap(countryDistribution, "map");
    }
  }

  customElements.define("leaflet-map", LeafletMap);
</script> -->

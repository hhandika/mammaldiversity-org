---
import { db, Taxonomy } from "astro:db";
import MainPage from "../../layouts/MainPage.astro";
import { eq } from "astro:db";
import { Synonym } from "astro:db";
import cntl from "cntl";
import SynonymPage from "../../components/SynonymPage.astro";
import SynonymList from "../../layouts/SynonymList.astro";
import TaxonData from "../../components/TaxonData.astro";
import { matchIUCNRedlistStatus } from "../../scripts/iucn";
import Page from "../../layouts/Page.astro";

// This page is statically generated at build time
// We use getStaticPaths to tell Astro to generate this page for each taxon in the database
// This approach allow us make sure the generated page is always up to date with the database
// It also ensure that the links to the taxon pages are always available
export const getStaticPaths = async () => {
  const taxonIDs = await db.select({ id: Taxonomy.id }).from(Taxonomy);
  return taxonIDs.map((t: { id: number }) => ({ params: { id: t.id } }));
};

const { id } = Astro.params;

const taxon = await db.select().from(Taxonomy).where(eq(Taxonomy.id, id)).get();
const synonyms = await db
  .select()
  .from(Synonym)
  .where(eq(Synonym.speciesId, id));

const authority = `${taxon?.authoritySpeciesAuthor}, ${taxon?.authoritySpeciesYear}`;

const iucnStatus = matchIUCNRedlistStatus(taxon?.iucnStatus ?? "NE");

const mddSpeciesPermanentLink = "https://www.mammaldiversity.org/taxon/";
const mddSpeciesLink = `${mddSpeciesPermanentLink}${taxon?.id}`;

const taxonomyClasses = cntl`
  bg-gradient-to-r
  from-spectra-100
  to-spicy-mix-100
  dark:from-spectra-900
  dark:to-spicy-mix-900
  pl-4 
  py-2 
  my-2 
  rounded-xl
`;

const common_name_class = cntl`
  text-xl 
  md:text-2xl
  text-spicy-mix-800 
  dark:text-spicy-mix-200
`;
---

<Page title="Taxon">
  <MainPage>
    <div class="text-center item-center mt-8 md:mt-16 mb-4">
      <h1 class="font-serif text-3xl md:text-5xl italic mb-2">
        {taxon?.genus}{` ${taxon?.specificEpithet}`}
      </h1>
      <h2 class="text-xl md:text-2xl">
        {taxon?.authorityParentheses === 1 ? `(${authority})` : authority}
      </h2>
      <h2 class={common_name_class}>
        {taxon?.mainCommonName}
      </h2>
    </div>
    <div class="flex-grow border-t-2 border-spectra-500 mb-4 rounded"></div>
    <div class="grid grid-cols-1 lg:grid-cols-2 justify-between gap-4 mt-4">
      <div>
        <div class={taxonomyClasses}>
          <h3 class="font-semibold text-lg md:text-xl mb-2">Taxonomy</h3>
          <table class="table-auto">
            <tbody>
              <tr>
                <td class="pr-2">Subclass</td>
                <td class="pl-2">: {taxon?.subclass}</td>
              </tr>
              <tr>
                <td class="pr-2">Infraclass</td>
                <td class="pl-2">: {taxon?.infraclass}</td>
              </tr>
              <tr>
                <td class="pr-2">Order</td>
                <td class="pl-2">: {taxon?.taxonOrder}</td>
              </tr>
              <tr>
                <td class="pr-2">Family</td>
                <td class="pl-2">: {taxon?.family}</td>
              </tr>
              <tr>
                <td class="pr-2">Genus</td>
                <td class="pl-2"
                  >: <span class="italic">{taxon?.genus}</span></td
                >
              </tr>
            </tbody>
          </table>
        </div>

        <TaxonData
          label="Authority citation"
          content={taxon?.authoritySpeciesCitation}
        />
        <TaxonData
          label="Authority publication link"
          content={taxon?.authoritySpeciesLink}
          isUrl
        />
        <TaxonData
          label="Original name as described"
          content={taxon?.originalNameCombination}
          isItalic
        />
        <TaxonData
          label="Other common names"
          content={taxon?.otherCommonNames}
        />
        <TaxonData label="Type material" content={taxon?.typeVoucher} />
        <TaxonData label="Type kind" content={taxon?.typeKind} />
        <TaxonData
          label="Type specimen URI"
          content={taxon?.typeVoucherURIs}
          isUrl
        />
        <TaxonData label="Type locality" content={taxon?.typeLocality} />
        <TaxonData
          label="Country distribution"
          content={taxon?.countryDistribution}
        />
        <TaxonData
          label="Distribution notes"
          content={taxon?.distributionNotes}
        />
        <TaxonData
          label="Distribution references"
          content={taxon?.distributionNotesCitation}
        />
        <TaxonData label="Taxonomy notes" content={taxon?.taxonomyNotes} />
        <TaxonData
          label="Taxonomy notes citation"
          content={taxon?.taxonomyNotesCitation}
        />
        <TaxonData label="IUCN Red List status" content={iucnStatus} />
        <TaxonData label="Species Permalink" content={mddSpeciesLink} isUrl />
      </div>
      <div>
        <div class="bg-spectra-100 dark:bg-spectra-900 rounded-xl p-4 my-2">
          <h3 class="text-lg md:text-xl font-semibold mb-2">
            Country distribution map
          </h3>
          <distribution-map data-countries={taxon?.countryDistribution}>
            <div id="map" class="justify-items-center max-w-full">
            </div></distribution-map
          >
        </div>
        {
          synonyms.length > 0 && (
            <SynonymList>
              {synonyms.map((s) => (
                <SynonymPage
                  originalNameCombination={s.originalCombination}
                  species={s.species}
                  rootName={s.rootName}
                  family={s.family}
                  authoritySpeciesAuthor={s.author}
                  authoritySpeciesYear={s.year}
                  authorityParentheses={s.authorityParentheses}
                  validityStatus={s.validity}
                  nomenclaturalStatus={s.nomenclatureStatus}
                  type={s.holotype}
                  typeKind={s.typeKind}
                  typeSpecimenLink={s.typeSpecimenLink}
                  authorityPage={s.authorityPage}
                  authorityPageLink={s.authorityPageLink}
                  authorityPublication={s.citationGroup}
                  nameUsages={s.nameUsages}
                />
              ))}
            </SynonymList>
          )
        }
      </div>
    </div>
  </MainPage>
</Page>

<script
  is:inline
  type="text/javascript"
  src="https://www.gstatic.com/charts/loader.js"></script>
<script is:inline>
  class DistributionMap extends HTMLElement {
    connectedCallback() {
      // Read the message from the data attribute.
      const countryDistribution = this.dataset.countries;
      const countries = countryDistribution
        .split("|")
        .map((country) => country.trim());

      google.charts.load("current", {
        packages: ["geochart"],
      });
      google.charts.setOnLoadCallback(drawRegionsMap);

      function drawRegionsMap() {
        var data = google.visualization.arrayToDataTable([
          ["Country"],
          ...countries.map((country) => [country]),
        ]);

        var options = {
          displayMode: "Regions",
          colorAxis: { colors: ["#00853f"] },
          legend: "none",
        };

        var chart = new google.visualization.GeoChart(
          document.getElementById("map")
        );

        chart.draw(data, options);
      }
    }
  }

  customElements.define("distribution-map", DistributionMap);
</script>
